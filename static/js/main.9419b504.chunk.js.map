{"version":3,"sources":["shared/NavigationBar.js","home/FormEffectView.js","home/FormFlavoursView.js","home/CardResultView.js","shared/EmailSubscribe.js","home/HomeViewModel.js","detail/ContentView.js","detail/BreadcrumbView.js","detail/DetailViewModel.js","App.js","serviceWorker.js","index.js","static/svg/logo_long.svg"],"names":["styles","StyleSheet","create","all","marginBottom","NavigationBar","react_default","a","createElement","Navbar_default","bg","className","css","Brand","href","src","Logo","height","alt","row","margin","button","backgroundColor","border",":hover","color","FormEffectView","_ref","idName","options","races","submitHandler","filterBy","filterLabel","Options","map","item","key","effect","value","type","Races","Form_default","onSubmit","Group","id","Row","Col_default","Label","Control","as","Button_default","variant","size","FormFlavoursView","normal","medium","@media (min-width: 768px)","CardResultView","raceClass","race","name","xs","sm","md","lg","xl","Link","to","Card_default","Body","Title","Subtitle","marginTop","@media (min-width: 992px)","@media (min-width: 1200px)","card","width","EmailSubscribe","Header","Text","method","action","placeholder","required","HomeViewModel","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","effectData","effectJSON","flavourData","flavourJSON","racesData","raceJSON","searchData","searchEffectBtnHandler","bind","assertThisInitialized","searchFlavourBtnHandler","page","ReactGA","set","pageview","flavour","Math","floor","random","length","randomResult","keys","strainJSON","filter","find","el","strain","setState","location","pathname","trackPage","nextProps","currentPage","nextPage","e","preventDefault","document","getElementById","effects","split","effectType","filteredResult","toLowerCase","event","category","label","_this$state","cardResults","result","keyName","home_CardResultView","Container_default","fluid","Row_default","Tabs_default","defaultActiveKey","Tab_default","eventKey","title","home_FormEffectView","home_FormFlavoursView","shared_EmailSubscribe","Component","ContentView","detail","desc","toUpperCase","flavors","join","positive","negative","medical","breadcrumb","BreadcrumbView","strainName","Nav_default","Item","disabled","DetailViewModel","detailData","detailName","detailDesc","_this2","match","parseInt","params","url","concat","process","axios","get","then","res","data","contentView","detail_ContentView","detail_BreadcrumbView","initialize","App","HashRouter","Fragment","shared_NavigationBar","Route","exact","path","component","Boolean","window","hostname","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.9419b504.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport { StyleSheet, css} from 'aphrodite/no-important';\r\nimport Logo from '../static/svg/logo_long.svg';\r\n\r\nconst NavigationBar = () => (\r\n  <Navbar bg=\"dark\" className={css(styles.all)}>\r\n    <Navbar.Brand href=\"#/\">\r\n      <img src={Logo} height={30} alt='Cannia Logo' />\r\n    </Navbar.Brand>\r\n  </Navbar>\r\n);\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  all: {\r\n    marginBottom: '30px'\r\n  }\r\n});\r\n\r\nexport default NavigationBar;\r\n","import React from 'react';\r\nimport { StyleSheet, css} from 'aphrodite/no-important';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst FormEffectView = ({ idName, options, races, filterBy, filterLabel, submitHandler}) => {\r\n  const Options = options.map(item => <option key={item.effect} value={item.effect+'-'+item.type}>{item.effect} {'('+item.type+' effect)'}</option>);\r\n  const Races = races.map(item => <option key={item} value={item}>{item}</option>);\r\n\r\n  return (\r\n    <Form onSubmit={submitHandler}>\r\n      <Form.Group id={idName}>\r\n        <Form.Row className={css(styles.row)}>\r\n          <Col>\r\n            <Form.Label>{'What effect are you looking for? '}</Form.Label>\r\n            <Form.Control as='select' id='effect'>\r\n              {Options}\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row className={css(styles.row)}>\r\n          <Col>\r\n            <Form.Label>From race</Form.Label>\r\n            <Form.Control as='select' id='race'>\r\n              {Races}\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row className={css(styles.row)}>\r\n          <Col>\r\n            <Button variant='primary' size='lg' type='submit' className={css(styles.button)}>\r\n              Search\r\n            </Button>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n};\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  row: {\r\n    margin: '15px 0 15px 0'\r\n  },\r\n  button: {\r\n    backgroundColor: '#30cab3',\r\n    border: '1px solid #30cab3',\r\n    ':hover': {\r\n      color: '#30cab3',\r\n      backgroundColor: '#ffffff',\r\n      border: '1px solid #30cab3'\r\n    }\r\n  }\r\n});\r\n\r\nexport default FormEffectView;\r\n","import React from 'react';\r\nimport { StyleSheet, css} from 'aphrodite/no-important';\r\nimport Form from 'react-bootstrap/Form';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst FormFlavoursView = ({ idName, options, races, submitHandler }) => {\r\n  const Options = options.map(item => <option key={item} value={item}>{item}</option>);\r\n  const Races = races.map(item => <option key={item} value={item}>{item}</option>);\r\n\r\n  return (\r\n    <Form onSubmit={submitHandler}>\r\n      <Form.Group id={idName}>\r\n        <Form.Row className={css(styles.row)}>\r\n          <Col>\r\n            <Form.Label>{ 'What flavour are you looking for?' }</Form.Label>\r\n            <Form.Control as='select' id='flavour'>\r\n              {Options}\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row className={css(styles.row)}>\r\n          <Col>\r\n            <Form.Label>From race</Form.Label>\r\n            <Form.Control as='select' id='race'>\r\n              {Races}\r\n            </Form.Control>\r\n          </Col>\r\n        </Form.Row>\r\n        <Form.Row className={css(styles.row)}>\r\n          <Col>\r\n            <Button variant='primary' size='lg' type='submit' className={css(styles.button)}>\r\n              Search\r\n            </Button>\r\n          </Col>\r\n        </Form.Row>\r\n      </Form.Group>\r\n    </Form>\r\n  );\r\n};\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  row: {\r\n    margin: '15px 0 15px 0'\r\n  },\r\n  button: {\r\n    backgroundColor: '#30cab3',\r\n    border: '1px solid #30cab3',\r\n    ':hover': {\r\n      color: '#30cab3',\r\n      backgroundColor: '#ffffff',\r\n      border: '1px solid #30cab3'\r\n    }\r\n  }\r\n});\r\n\r\nexport default FormFlavoursView;\r\n","import React from 'react';\r\nimport { StyleSheet, css} from 'aphrodite/no-important';\r\nimport { Link } from 'react-router-dom';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst CardResultView = ({ id, race, name }) => {\r\n  const className = css(\r\n    styles.normal,\r\n    styles.medium\r\n  );\r\n\r\n  let raceClass;\r\n  if(race === 'indica') {\r\n    raceClass = 'bg-success';\r\n  } else if(race === 'sativa') {\r\n    raceClass = 'bg-info';\r\n  } else if(race === 'hybrid') {\r\n    raceClass = 'bg-danger';\r\n  }\r\n\r\n  return (\r\n    <Col xs={12} sm={6} md={6} lg={4} xl={3}>\r\n      <Link to={'/strain/'+id} className='text-white'>\r\n        <Card className={className + ' ' + raceClass}>\r\n          <Card.Body>\r\n            <Card.Title>\r\n              {name}\r\n            </Card.Title>\r\n            <Card.Subtitle className='mb2'>{race}</Card.Subtitle>\r\n          </Card.Body>\r\n        </Card>\r\n      </Link>\r\n    </Col>\r\n  )\r\n};\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  normal: {\r\n    margin: '20px 0 20px 0'\r\n  },\r\n  medium: {\r\n    '@media (min-width: 768px)': {\r\n      margin: '0 0 40px 0'\r\n    }\r\n  }\r\n});\r\n\r\nexport default CardResultView;\r\n","import { StyleSheet, css} from 'aphrodite/no-important';\r\nimport React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Form from 'react-bootstrap/Form';\r\n\r\nconst EmailSubscribe = () => {\r\n  return (\r\n    <Card className={css(styles.all, styles.card)}>\r\n      <Card.Header>Newsletter</Card.Header>\r\n      <Card.Body>\r\n        <Card.Text>\r\n          Insert your email to get update from Tania project. We will only send updates twice a month maximum. We promise!\r\n        </Card.Text>\r\n        <Form method='POST' action='https://formspree.io/taniboxmail@gmail.com'>\r\n          <input type='hidden' name='campaign' value='Cannia Form' />\r\n          <Form.Row>\r\n            <Col xs={8} sm={8} md={12} lg={12} xl={8}>\r\n              <Form.Control as='input' placeholder='Your email here' name='email' required={true} />\r\n            </Col>\r\n            <Col xs={4} sm={4} md={12} lg={12} xl={4}>\r\n              <Button variant='primary' type='submit' className={css(styles.button)}>\r\n                Subscribe\r\n              </Button>\r\n            </Col>\r\n          </Form.Row>\r\n        </Form>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n};\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  all: {\r\n    margin: '20px 0'\r\n  },\r\n  button: {\r\n    backgroundColor: '#61dd8e',\r\n    border: '1px solid #61dd8e',\r\n    ':hover': {\r\n      color: '#61dd8e',\r\n      backgroundColor: '#ffffff',\r\n      border: '1px solid #61dd8e'\r\n    },\r\n    '@media (min-width: 768px)': {\r\n      marginTop: '10px'\r\n    },\r\n    '@media (min-width: 992px)': {\r\n      marginTop: '10px'\r\n    },\r\n    '@media (min-width: 1200px)': {\r\n      marginTop: '0'\r\n    }\r\n  },\r\n  card: {\r\n    '@media (min-width: 768px)': {\r\n      width: '100% !important'\r\n    },\r\n    '@media (min-width: 992px)': {\r\n      marginTop: '0',\r\n    },\r\n    '@media (min-width: 1200px)': {\r\n      marginTop: '0'\r\n    }\r\n  }\r\n});\r\n\r\nexport default EmailSubscribe;\r\n","import React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport { StyleSheet, css} from 'aphrodite/no-important';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Tabs from 'react-bootstrap/Tabs';\r\nimport Tab from 'react-bootstrap/Tab';\r\nimport effectJSON from '../data/effects.json';\r\nimport flavourJSON from '../data/flavors.json';\r\nimport raceJSON from '../data/races.json';\r\nimport strainJSON from '../data/strains.json';\r\nimport FormEffectView from './FormEffectView';\r\nimport FormFlavoursView from './FormFlavoursView';\r\nimport CardResultView from './CardResultView'\r\nimport EmailSubscribe from '../shared/EmailSubscribe';\r\n\r\nclass HomeViewModel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      effectData: effectJSON,\r\n      flavourData: flavourJSON,\r\n      racesData: raceJSON,\r\n      searchData: []\r\n    };\r\n\r\n    this.searchEffectBtnHandler = this.searchEffectBtnHandler.bind(this);\r\n    this.searchFlavourBtnHandler = this.searchFlavourBtnHandler.bind(this);\r\n  }\r\n\r\n  /**\r\n   * Track page with Google Analytic\r\n   *\r\n   * @param {String} page\r\n   */\r\n  trackPage(page) {\r\n    ReactGA.set({\r\n      page\r\n    });\r\n    ReactGA.pageview(page);\r\n  };\r\n\r\n  /**\r\n   * Load sample data on the first load\r\n   *\r\n   */\r\n  componentDidMount() {\r\n    const flavour = flavourJSON[Math.floor(Math.random()*flavourJSON.length)];\r\n\r\n    // querying 10 random strains by its flavours\r\n    const randomResult = Object.keys(strainJSON).filter(key => {\r\n      return strainJSON[key]['flavors'].find( el => el === flavour);\r\n    }).map(item => {\r\n      let strain = {};\r\n      strain[item] = strainJSON[item];\r\n      return strain;\r\n    });\r\n\r\n    this.setState({ searchData: randomResult });\r\n\r\n    // GA pageview tracking\r\n    const page = this.props.location.pathname;\r\n    this.trackPage(page);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const currentPage = this.props.location.pathname;\r\n    const nextPage = nextProps.location.pathname;\r\n\r\n    if (currentPage !== nextPage) {\r\n      this.trackPage(nextPage);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This method will filter Strain based on the effect.\r\n   *\r\n   * @param {Object} e is built in browser event\r\n   */\r\n  searchEffectBtnHandler(e) {\r\n    e.preventDefault();\r\n\r\n    const race = document.getElementById('race').value;\r\n    const effects = document.getElementById('effect').value.split('-');\r\n    const effect = effects[0];\r\n    const effectType = effects[1];\r\n\r\n    // querying strains data based on its effect and race\r\n    const filteredResult = Object.keys(strainJSON).filter(key => {\r\n      return strainJSON[key]['effects'][effectType].find( el => el === effect) && strainJSON[key]['race'] === race.toLowerCase();\r\n    }).map(item => {\r\n      let strain = {};\r\n      strain[item] = strainJSON[item];\r\n      return strain;\r\n    });\r\n\r\n    this.setState({ searchData: filteredResult });\r\n\r\n    // GA tracking\r\n    ReactGA.event({\r\n      category: 'Search',\r\n      action: 'Clicked',\r\n      label: 'Search - Effects'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method will filter Strain based on the flavour.\r\n   *\r\n   * @param {Object} e is built in browser event\r\n   */\r\n  searchFlavourBtnHandler(e) {\r\n    e.preventDefault();\r\n\r\n    const race = document.getElementById('race').value;\r\n    const flavour = document.getElementById('flavour').value;\r\n\r\n    // querying strains data based on its flavour and race\r\n    const filteredResult = Object.keys(strainJSON).filter(key => {\r\n      return strainJSON[key]['flavors'].find( el => el === flavour) && strainJSON[key]['race'] === race.toLowerCase();\r\n    }).map(item => {\r\n      let strain = {};\r\n      strain[item] = strainJSON[item];\r\n      return strain;\r\n    });\r\n\r\n    this.setState({ searchData: filteredResult });\r\n\r\n    // GA tracking\r\n    ReactGA.event({\r\n      category: 'Search',\r\n      action: 'Clicked',\r\n      label: 'Search - Flavours'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The JSX template starts here.\r\n   *\r\n   */\r\n  render() {\r\n    const { effectData, flavourData, racesData, searchData } = this.state;\r\n    const cardResults = searchData.map(result => {\r\n      const keyName = Object.keys(result)[0];\r\n\r\n      return <CardResultView\r\n        key={result[keyName].id}\r\n        id={result[keyName].id}\r\n        race={result[keyName].race}\r\n        name={keyName}\r\n      />\r\n    });\r\n\r\n    return (\r\n      <Container fluid={true}>\r\n        <Row>\r\n          <Col xs={12} sm={12} md={4} lg={3}>\r\n            <div className={css(styles.all) + ' sticky-top'}>\r\n              {/* Tabs for the search form */}\r\n              <Tabs defaultActiveKey='effects'>\r\n                <Tab eventKey='effects' title='Effects'>\r\n                  <FormEffectView\r\n                    idName='effectFrm'\r\n                    options={effectData}\r\n                    races={racesData}\r\n                    submitHandler={this.searchEffectBtnHandler}\r\n                  />\r\n                </Tab>\r\n                <Tab eventKey='flavours' title='Flavours'>\r\n                  <FormFlavoursView\r\n                    idName='flavourFrm'\r\n                    options={flavourData}\r\n                    races={racesData}\r\n                    submitHandler={this.searchFlavourBtnHandler}\r\n                  />\r\n                </Tab>\r\n              </Tabs>\r\n            </div>\r\n            {/* Email newsletter only wider than sm */}\r\n            <div className='d-none d-md-block'>\r\n              <EmailSubscribe />\r\n            </div>\r\n          </Col>\r\n\r\n          {/* Search Result */}\r\n          <Col xs={12} sm={12} md={8} lg={9}>\r\n            <Row>\r\n              {cardResults}\r\n            </Row>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  all: {\r\n    backgroundColor: '#ffffff'\r\n  }\r\n});\r\n\r\nexport default HomeViewModel;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport { StyleSheet, css} from 'aphrodite/no-important';\r\nimport EmailSubscribe from '../shared/EmailSubscribe';\r\n\r\nconst ContentView = ({ title, detail, desc }) => {\r\n  let raceClass;\r\n  if(detail.race === 'indica') {\r\n    raceClass = 'bg-success';\r\n  } else if(detail.race === 'sativa') {\r\n    raceClass = 'bg-info';\r\n  } else if(detail.race === 'hybrid') {\r\n    raceClass = 'bg-danger';\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col xs={12} sm={12} md={8} lg={6}>\r\n        <Card>\r\n          <Card.Header className={raceClass + ' text-white'}>{detail.race.toUpperCase()}</Card.Header>\r\n          <Card.Body>\r\n            <Card.Title>{title}</Card.Title>\r\n            <Card.Text>{desc}</Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n        {/* Visible only on md */}\r\n        <div className='d-none d-md-block d-lg-none'>\r\n          <EmailSubscribe />\r\n        </div>\r\n      </Col>\r\n      <Col xs={12} sm={12} md={4} lg={3}>\r\n        <Card className={css(styles.normal, styles.medium)}>\r\n          <Card.Header>Information</Card.Header>\r\n          <Card.Body>\r\n            <Card.Text>\r\n              Flavours: <br/>\r\n              <span className=\"text-muted\">{detail.flavors.join(', ')}</span>\r\n            </Card.Text>\r\n            <Card.Text>\r\n              Positive effect: <br/>\r\n              <span className=\"text-muted\">{detail.effects.positive.join(', ')}</span>\r\n            </Card.Text>\r\n            <Card.Text>\r\n              Negative effect: <br/>\r\n              <span className=\"text-muted\">{detail.effects.negative.join(', ')}</span>\r\n            </Card.Text>\r\n            <Card.Text>\r\n              Medical effect: <br/>\r\n              <span className=\"text-muted\">{detail.effects.medical.join(', ')}</span>\r\n            </Card.Text>\r\n          </Card.Body>\r\n        </Card>\r\n      </Col>\r\n      {/* Visible only on xs */}\r\n      <Col className='d-block d-sm-none'>\r\n        <EmailSubscribe />\r\n      </Col>\r\n\r\n      {/* Visible only on sm */}\r\n      <Col className='d-none d-sm-block d-md-none'>\r\n        <EmailSubscribe />\r\n      </Col>\r\n\r\n      {/* Visible only on lg */}\r\n      <Col className='d-none d-lg-block d-xl-none'>\r\n        <EmailSubscribe />\r\n      </Col>\r\n\r\n      {/* Visible only on xl */}\r\n      <Col className='d-none d-xl-block'>\r\n        <EmailSubscribe />\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\n// THE CSS PART\r\nconst styles = StyleSheet.create({\r\n  normal: {\r\n    marginTop: '20px'\r\n  },\r\n  medium: {\r\n    '@media (min-width: 768px)': {\r\n      marginTop: '0'\r\n    }\r\n  }\r\n});\r\n\r\nexport default ContentView;\r\n","import { StyleSheet, css} from 'aphrodite/no-important';\r\nimport React from 'react';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nconst BreadcrumbView = ({ strainName }) => {\r\n  return (\r\n    <Row>\r\n      <Col xs={12} sm={12} md={8} lg={6}>\r\n        <Nav className={css(styles.breadcrumb)}>\r\n          <Nav.Item>\r\n            <Nav.Link href='#/'>Home</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey='disabled' disabled>&raquo;</Nav.Link>\r\n          </Nav.Item>\r\n          <Nav.Item>\r\n            <Nav.Link eventKey='disabled' disabled>{strainName}</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Col>\r\n    </Row>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  breadcrumb: {\r\n    marginBottom: '15px'\r\n  }\r\n});\r\n\r\nexport default BreadcrumbView;\r\n","import React, { Component } from 'react';\r\nimport ReactGA from 'react-ga';\r\nimport axios from 'axios';\r\nimport Container from 'react-bootstrap/Container';\r\nimport strainJSON from '../data/strains.json';\r\nimport ContentView from './ContentView';\r\nimport BreadcrumbView from './BreadcrumbView';\r\n\r\nclass DetailViewModel extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      detailData: {},\r\n      detailName: '',\r\n      detailDesc: '',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Track page with Google Analytic\r\n   *\r\n   * @param {String} page\r\n   */\r\n  trackPage(page) {\r\n    ReactGA.set({\r\n      page\r\n    });\r\n    ReactGA.pageview(page);\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { match } = this.props;\r\n    const strainName = Object.keys(strainJSON).find(key => {\r\n      return strainJSON[key]['id'] === parseInt(match.params.id);\r\n    });\r\n\r\n    this.setState({\r\n      detailData: strainJSON[strainName],\r\n      detailName: strainName\r\n    });\r\n\r\n    // get strain description\r\n    const url = `https://strainapi.evanbusse.com/${process.env.REACT_APP_STRAIN_API_KEY}/strains/data/desc/${match.params.id}`;\r\n    axios.get(url).then(res => {\r\n      if(res.data.desc !== null) {\r\n        this.setState({ detailDesc: res.data.desc });\r\n      } else {\r\n        this.setState({ detailDesc: 'The description of this strain is not found.' })\r\n      }\r\n    });\r\n\r\n    // GA pageview tracking\r\n    const page = this.props.location.pathname;\r\n    this.trackPage(page);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    const currentPage = this.props.location.pathname;\r\n    const nextPage = nextProps.location.pathname;\r\n\r\n    if (currentPage !== nextPage) {\r\n      this.trackPage(nextPage);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { detailData, detailName, detailDesc } = this.state;\r\n    const contentView = detailName === '' ? '' : <ContentView title={detailName} detail={detailData} desc={detailDesc} />;\r\n\r\n    return (\r\n      <Container fluid={true}>\r\n        <BreadcrumbView strainName={detailName} />\r\n        {contentView}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DetailViewModel;\r\n","import './App.scss';\r\nimport React, { Component } from 'react';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport ReactGA from 'react-ga';\r\nimport NavigationBar from './shared/NavigationBar';\r\nimport HomeViewModel from './home/HomeViewModel';\r\nimport DetailViewModel from './detail/DetailViewModel';\r\n\r\nReactGA.initialize('UA-133765833-2');\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <React.Fragment>\r\n          <NavigationBar />\r\n\r\n          <Route exact path=\"/\" component={HomeViewModel} />\r\n          <Route path=\"/strain/:id\" component={DetailViewModel} />\r\n        </React.Fragment>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo_long.669b19bc.svg\";"],"sourceRoot":""}